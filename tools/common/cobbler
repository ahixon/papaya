#!/bin/bash

# @LICENSE(NICTA_CORE)

# Build a qemu-bootable harddisk image.
#
# Usage:
# An optional kernel command line argument is provided with -a.
# The kernel image is provided with -k.
# The output harddisk image is specified with -o.
# Userland images are provided after that (usually only one).
#
# Authors:
# Benjamin Kalman, 2009
# Michael von Tessin, 2010

# Support build system debugging directive passed from above.
if [ 0${V} -ge 3 ]; then
    set -x
fi

# Find syslinux
SYSLINUX=`which syslinux`
if [ -z "${SYSLINUX}" ]; then
    echo "syslinux not found." >&2
    exit 1
fi
SYSLINUXDIR=`echo $SYSLINUX | sed 's:/bin/:/share/:'`
[ -f "$SYSLINUXDIR"/mbr.bin ] || SYSLINUXDIR="`echo $SYSLINUXDIR | sed 's:/share/:/lib/:'`"
[ -f "$SYSLINUXDIR"/mbr.bin ] || {
       echo >&2 "Cannot find syslinux data directory!"
       exit 1
}

trap "rm -f mtoolsrc syslinux.cfg mbr.bin" 0

# Parse options
while getopts "k:o:a:" flag ; do
    case "$flag" in
        k) KERNEL="$OPTARG" ;;
        o) OUTIMG="$OPTARG" ;;
        a) CMDLINE="$OPTARG" ;;
    esac
done
shift $(($OPTIND-1))
UIMGS=$@

if [ ! -f "$KERNEL" -o -z "$OUTIMG" -o -z "$UIMGS" ] ; then
    echo "Usage: $0 [-a kernel_cmdline] -k kernel_image -o output_image userland_images ..."
    exit 1
fi

for UIMG in $UIMGS ; do
    if [ ! -f "$UIMG" ] ; then
        echo "Error: Userland image '$UIMG' not found!"
        exit 1
    fi
done

# Calculate image size and number of cylinders

IMGSIZE=`stat -c '%s' $UIMGS $KERNEL $SYSLINUXDIR/mboot.c32 | awk ' { sum += $1 } END { print sum }'`

echo "final image size will be $IMGSIZE"

HEADS=16
SECTORS=63
BLKSPERCYL=`expr $HEADS \* $SECTORS`
CYLINDERS=`expr 2 + $IMGSIZE / 512 / $BLKSPERCYL`

# Create a blank image
dd if=/dev/zero of="$OUTIMG" count=1 seek=`expr $CYLINDERS \* $BLKSPERCYL - 1` bs=512 2>/dev/null

# Set up mtools
echo "drive c: file=\"$OUTIMG\" partition=1" > mtoolsrc
export MTOOLSRC=mtoolsrc

# Get mbr.bin and blow up/cut down to 512 bytes (required by mtools)
cat $SYSLINUXDIR/mbr.bin /dev/zero 2>/dev/null | head -c 512 > mbr.bin

# Create filesystem
which mpartition &>/dev/null
if [ $? -ne 0 ]; then
    echo "mpartition not found. Is mtools installed?" >&2
    exit 1
fi
mpartition -I -B mbr.bin c:
mpartition -c -t $CYLINDERS -h $HEADS -s $SECTORS c:
mpartition -a c:
mformat c:
syslinux -o `expr $SECTORS \* 512` $OUTIMG

# Write syslinux config file
UIMGS_CFG=""
for UIMG in $UIMGS
do
    UIMGS_CFG="$UIMGS_CFG --- `basename $UIMG`"
done

cat > syslinux.cfg <<EOF
serial 0 115200
default mylabel

label mylabel
  kernel mboot.c32
  append `basename $KERNEL` $CMDLINE $UIMGS_CFG
EOF

# Install kernel and apps to the image
for file in $KERNEL $UIMGS $SYSLINUXDIR/mboot.c32 syslinux.cfg
do
    mcopy "$file" c: || {
        echo "Error: mcopy $file failed!" >&2
        exit 1
    }
done

# And we're done
echo "Image '$OUTIMG' successfully created"
