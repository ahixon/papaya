# This file contains programs that are needed at boot time.
# It is parsed by the boot thread (see boot/boot.c).
#
# Format is: <cpio_file>=<type>
# where type is:
#   async   - start the service, but don't wait for it to start
#   sync    - start it, but wait for it to indicate that it has
#             finished starting. If it fails to start, boot will
#             not continue. WE DO NOT SUPPORT TIMEOUTS.
#   boot    - this is the boot program. We still start this and
#             terminate the boot process.
#
# Lines starting with a # are comments (obviously).
#
# Commands are executed in order, so if you have dependencies,
# you can load them the required order, using the necessary
# boot type.
#
# If a given program does not exist, the error will be reported
# on debug console (if available). Boot will halt.
#
# Multiple boot apps can be listed, although boot will exit once
# the first boot application has started successfully. eg you
# could provide a recovery console if the main boot app on the
# filesystem doesn't work. 

# Core services
dev_timer=sync
svc_vfs=async
svc_dev=async

# NFS and dependencies
svc_net=async
fs_nfs=sync

fs_dev=sync

# Pin swap-related processes before we enable swapping
pin fs_nfs
pin svc_net

# Mount user filesystems
mount fstab.txt

# Now that filesystems have been mounted, enable swapping
swap /swap.bin

# We need to ensure this finishes starting before starting 
# our application, otherwise standard I/O will not be available
dev_console=sync

# Finally, start the boot app. This can either be a full path
# or a CPIO file. CPIO has priority.
#/bin/sosh=boot
#/mnt/cpio/sosh=boot
#sosh=boot
thrash=boot